// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: keygen.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	KeygenService_GenerateKey_FullMethodName    = "/keygen.KeygenService/GenerateKey"
	KeygenService_KeygenFinished_FullMethodName = "/keygen.KeygenService/KeygenFinished"
)

// KeygenServiceClient is the client API for KeygenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeygenServiceClient interface {
	GenerateKey(ctx context.Context, in *KeygenRequest, opts ...grpc.CallOption) (*KeygenResponse, error)
	KeygenFinished(ctx context.Context, opts ...grpc.CallOption) (KeygenService_KeygenFinishedClient, error)
}

type keygenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeygenServiceClient(cc grpc.ClientConnInterface) KeygenServiceClient {
	return &keygenServiceClient{cc}
}

func (c *keygenServiceClient) GenerateKey(ctx context.Context, in *KeygenRequest, opts ...grpc.CallOption) (*KeygenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KeygenResponse)
	err := c.cc.Invoke(ctx, KeygenService_GenerateKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keygenServiceClient) KeygenFinished(ctx context.Context, opts ...grpc.CallOption) (KeygenService_KeygenFinishedClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &KeygenService_ServiceDesc.Streams[0], KeygenService_KeygenFinished_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &keygenServiceKeygenFinishedClient{ClientStream: stream}
	return x, nil
}

type KeygenService_KeygenFinishedClient interface {
	Send(*KeygenFinishedRequest) error
	CloseAndRecv() (*KeygenFinishedResponse, error)
	grpc.ClientStream
}

type keygenServiceKeygenFinishedClient struct {
	grpc.ClientStream
}

func (x *keygenServiceKeygenFinishedClient) Send(m *KeygenFinishedRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *keygenServiceKeygenFinishedClient) CloseAndRecv() (*KeygenFinishedResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(KeygenFinishedResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KeygenServiceServer is the server API for KeygenService service.
// All implementations must embed UnimplementedKeygenServiceServer
// for forward compatibility
type KeygenServiceServer interface {
	GenerateKey(context.Context, *KeygenRequest) (*KeygenResponse, error)
	KeygenFinished(KeygenService_KeygenFinishedServer) error
	mustEmbedUnimplementedKeygenServiceServer()
}

// UnimplementedKeygenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKeygenServiceServer struct {
}

func (UnimplementedKeygenServiceServer) GenerateKey(context.Context, *KeygenRequest) (*KeygenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateKey not implemented")
}
func (UnimplementedKeygenServiceServer) KeygenFinished(KeygenService_KeygenFinishedServer) error {
	return status.Errorf(codes.Unimplemented, "method KeygenFinished not implemented")
}
func (UnimplementedKeygenServiceServer) mustEmbedUnimplementedKeygenServiceServer() {}

// UnsafeKeygenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeygenServiceServer will
// result in compilation errors.
type UnsafeKeygenServiceServer interface {
	mustEmbedUnimplementedKeygenServiceServer()
}

func RegisterKeygenServiceServer(s grpc.ServiceRegistrar, srv KeygenServiceServer) {
	s.RegisterService(&KeygenService_ServiceDesc, srv)
}

func _KeygenService_GenerateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeygenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeygenServiceServer).GenerateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeygenService_GenerateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeygenServiceServer).GenerateKey(ctx, req.(*KeygenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeygenService_KeygenFinished_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KeygenServiceServer).KeygenFinished(&keygenServiceKeygenFinishedServer{ServerStream: stream})
}

type KeygenService_KeygenFinishedServer interface {
	SendAndClose(*KeygenFinishedResponse) error
	Recv() (*KeygenFinishedRequest, error)
	grpc.ServerStream
}

type keygenServiceKeygenFinishedServer struct {
	grpc.ServerStream
}

func (x *keygenServiceKeygenFinishedServer) SendAndClose(m *KeygenFinishedResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *keygenServiceKeygenFinishedServer) Recv() (*KeygenFinishedRequest, error) {
	m := new(KeygenFinishedRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KeygenService_ServiceDesc is the grpc.ServiceDesc for KeygenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeygenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "keygen.KeygenService",
	HandlerType: (*KeygenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateKey",
			Handler:    _KeygenService_GenerateKey_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "KeygenFinished",
			Handler:       _KeygenService_KeygenFinished_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "keygen.proto",
}
