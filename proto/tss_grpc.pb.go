// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: tss.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TSSService_InitiateKeygen_FullMethodName  = "/tss.TSSService/InitiateKeygen"
	TSSService_ExchangeMessage_FullMethodName = "/tss.TSSService/ExchangeMessage"
)

// TSSServiceClient is the client API for TSSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TSS 서비스 정의
type TSSServiceClient interface {
	// Gateway -> Party: 키 생성 요청
	InitiateKeygen(ctx context.Context, in *KeygenRequest, opts ...grpc.CallOption) (*KeygenResponse, error)
	// Party <-> Party: 메시지 교환
	ExchangeMessage(ctx context.Context, in *MessageWrapper, opts ...grpc.CallOption) (*MessageResponse, error)
}

type tSSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTSSServiceClient(cc grpc.ClientConnInterface) TSSServiceClient {
	return &tSSServiceClient{cc}
}

func (c *tSSServiceClient) InitiateKeygen(ctx context.Context, in *KeygenRequest, opts ...grpc.CallOption) (*KeygenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KeygenResponse)
	err := c.cc.Invoke(ctx, TSSService_InitiateKeygen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSSServiceClient) ExchangeMessage(ctx context.Context, in *MessageWrapper, opts ...grpc.CallOption) (*MessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, TSSService_ExchangeMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TSSServiceServer is the server API for TSSService service.
// All implementations must embed UnimplementedTSSServiceServer
// for forward compatibility
//
// TSS 서비스 정의
type TSSServiceServer interface {
	// Gateway -> Party: 키 생성 요청
	InitiateKeygen(context.Context, *KeygenRequest) (*KeygenResponse, error)
	// Party <-> Party: 메시지 교환
	ExchangeMessage(context.Context, *MessageWrapper) (*MessageResponse, error)
	mustEmbedUnimplementedTSSServiceServer()
}

// UnimplementedTSSServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTSSServiceServer struct {
}

func (UnimplementedTSSServiceServer) InitiateKeygen(context.Context, *KeygenRequest) (*KeygenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateKeygen not implemented")
}
func (UnimplementedTSSServiceServer) ExchangeMessage(context.Context, *MessageWrapper) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeMessage not implemented")
}
func (UnimplementedTSSServiceServer) mustEmbedUnimplementedTSSServiceServer() {}

// UnsafeTSSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TSSServiceServer will
// result in compilation errors.
type UnsafeTSSServiceServer interface {
	mustEmbedUnimplementedTSSServiceServer()
}

func RegisterTSSServiceServer(s grpc.ServiceRegistrar, srv TSSServiceServer) {
	s.RegisterService(&TSSService_ServiceDesc, srv)
}

func _TSSService_InitiateKeygen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeygenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSSServiceServer).InitiateKeygen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSSService_InitiateKeygen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSSServiceServer).InitiateKeygen(ctx, req.(*KeygenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSSService_ExchangeMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSSServiceServer).ExchangeMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSSService_ExchangeMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSSServiceServer).ExchangeMessage(ctx, req.(*MessageWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

// TSSService_ServiceDesc is the grpc.ServiceDesc for TSSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TSSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tss.TSSService",
	HandlerType: (*TSSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitiateKeygen",
			Handler:    _TSSService_InitiateKeygen_Handler,
		},
		{
			MethodName: "ExchangeMessage",
			Handler:    _TSSService_ExchangeMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tss.proto",
}
